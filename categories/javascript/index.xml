<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on cmygray</title>
    <link>http://cmygray.github.io/categories/javascript/</link>
    <description>Recent content in Javascript on cmygray</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 04 Nov 2017 23:47:30 +0900</lastBuildDate>
    
	<atom:link href="http://cmygray.github.io/categories/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Angular2_brief_summary</title>
      <link>http://cmygray.github.io/post/angular/angular2_brief_summary/</link>
      <pubDate>Sat, 04 Nov 2017 23:47:30 +0900</pubDate>
      
      <guid>http://cmygray.github.io/post/angular/angular2_brief_summary/</guid>
      <description>Angular - brief summary Angular2 프로젝트와 수업을 대비하여 간단하게 살펴보고 정리중입니다. 내용은 지속적으로 추가됩니다.

참고자료
 poiemaweb tutorials Angular2 vs. React  Common Pros
 개발 생산성(대규모 지향, 컴포넌트 중심) 전체 구조를 아우르는 방식  Cons
 퍼포먼스(렌더링 속도)  two-way binding =&amp;gt; digest loop =&amp;gt; lower performance  not support IE8  CLI 개발환경으로서 제공하는 기능
 build test add/rm element internal server  Architecture Component  has own view (component, directive, pipe) =&amp;gt; view  Directive  format: HTML element || attribute role: Direction view를 가지고 있지 않음  종류</description>
    </item>
    
    <item>
      <title>TypeScript Basics</title>
      <link>http://cmygray.github.io/post/javascript/typescript_basics/</link>
      <pubDate>Sat, 04 Nov 2017 22:56:48 +0900</pubDate>
      
      <guid>http://cmygray.github.io/post/javascript/typescript_basics/</guid>
      <description>TypeScript basic syntax and features Class, Interface, Generic
Class 타입스크립트의 클래스는 ES6 클래스와 전반적으로 비슷하지만, 몇가지 고유 기능이 존재한다.
 member var declaration access modifier(public, protected, private default=public) static member var abstract class  Definition ES6
class Person { constructor(name) { this.name = name; // public  } walk() { console.log(`${this.name}walk`); } }  TS
class Person { name: string; // public  constructor(name: string) { this.name = name; } walk() { console.</description>
    </item>
    
    <item>
      <title>ES5, ES6 Class 비교</title>
      <link>http://cmygray.github.io/post/javascript/class/</link>
      <pubDate>Thu, 02 Nov 2017 23:41:50 +0900</pubDate>
      
      <guid>http://cmygray.github.io/post/javascript/class/</guid>
      <description>Javascript Class  Definition  ES5 ES6  Inheritance  ES6   Javascrit 튜토리얼 Poiemaweb의 ES6-class컨텐츠를 학습하며 정리한 글입니다.
Definition 자바스크립트는 프로토타입 기반 멀티 패러다임 랭귀지이다. ES5에서는 생성자 함수와 프로토타입을 사용하여 객체 지향 프로그래밍을 구현했다. ES6에서는 Class 키워드를 도입하여 객체 지향 프로그래밍을 지원하지만, 생성자 함수와 프로토타입을 이용한 내부 동작 원리는 같다.
ES5 ES5 클래스 구현 코드 예제
// ES5 var Person = (function () { // 1. 변수 Person에 함수의 반환값을 할당하였다.</description>
    </item>
    
    <item>
      <title>Ajax</title>
      <link>http://cmygray.github.io/post/javascript/ajax/</link>
      <pubDate>Wed, 18 Oct 2017 23:54:05 +0900</pubDate>
      
      <guid>http://cmygray.github.io/post/javascript/ajax/</guid>
      <description>Ajax Asyncronous Javascript and XML
비동기 통신을 이용한 웹 개발 기법

목적
 네트워크 블로킹 상태 억제. 사용성 증대, 패킷 절약.  효용
 페이지의 일부만 갱신 가능. 서버와 통신중에도 방해받지 않음.  방법
 서버와의 통신경과와 전송 데이터와 관련된 동작 스크립트의 실행컨텍스트를 이벤트 루프가 컨트롤하도록 한다. (DOM 객체 수정 스크립트의 실행컨텍스트를 사용자와 페이지 간 인터렉션에 의해 이벤트 루프가 컨트롤 하듯.) XMLHttpRequest 객체와 메소드가 이를 지원한다. 요청을 위해서는 먼저 request 객체를 생성, 요청에 관한 정보를 담아 완성 후 전송한다.</description>
    </item>
    
    <item>
      <title>javascript deep-dive summary</title>
      <link>http://cmygray.github.io/post/javascript/deep-dive/</link>
      <pubDate>Mon, 16 Oct 2017 01:38:59 +0900</pubDate>
      
      <guid>http://cmygray.github.io/post/javascript/deep-dive/</guid>
      <description>10월 10일 - 12일 간 배운 자바스크립트 deep-dive에 대한 정리 웹 프로그래밍 튜토리얼과 MDN 자바스크립트 문서를 참고. ES5를 기준으로 하며, ES6에 해당하는 내용은 상단에 @ES6 표시.  
1. Built in Object  오브젝트의 구조
 Host obj(user-made) Built in obj  Standard(global objects of window;global object) Native  BOM DOM    구성 순서: Standards -&amp;gt; Native
  2. Standard built-in Object  구조  Global Object(window;js | global;node)  Global Objects: Object, Function, Boolean, Number, String &amp;hellip;    표준 빌트인 객체에는 글로벌 오브젝트인 윈도우와, 윈도우에 속하는 나머지 글로벌 오브젝트&amp;rsquo;들&amp;rsquo;이 있다.</description>
    </item>
    
    <item>
      <title>javascript fundamentals summary</title>
      <link>http://cmygray.github.io/post/javascript/fundamentals/</link>
      <pubDate>Sat, 07 Oct 2017 01:15:36 +0900</pubDate>
      
      <guid>http://cmygray.github.io/post/javascript/fundamentals/</guid>
      <description>수정내역
10.07. scope, this 내용 보충
 지금(작성일 기준)까지 배운 자바스크립트의 기본 내용을 정리. 웹 프로그래밍 튜토리얼과 MDN 자바스크립트 문서를 참고하여 보완. 추가된 항목은 볼드표시해서 구분. ES5를 기준으로 하며, ES6에 해당하는 내용은 상단에 @ES6 표시.  programming 문제 인식 - 작은 문제로 쪼개기 - 쪼개진 문제를 해결 - 해결의 종합 - 문제 해결
Computational thinking을 토대로 위의 절차를 진행하는 것
basic syntax  sentence;구문
구문이란 자바스크립트 내의 모든 명령이다. 명령은 세미콜론(;)으로 분리된다.</description>
    </item>
    
  </channel>
</rss>