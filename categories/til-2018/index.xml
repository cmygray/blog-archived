<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TIL-2018 on cmygray</title>
    <link>http://cmygray.github.io/categories/til-2018/</link>
    <description>Recent content in TIL-2018 on cmygray</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 21 Jan 2018 18:53:26 +0900</lastBuildDate>
    
	<atom:link href="http://cmygray.github.io/categories/til-2018/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>HTTP–The Definitive Guide, &#39;HTTP Messages&#39;</title>
      <link>http://cmygray.github.io/post/til-2018/0121/</link>
      <pubDate>Sun, 21 Jan 2018 18:53:26 +0900</pubDate>
      
      <guid>http://cmygray.github.io/post/til-2018/0121/</guid>
      <description>무엇을 알아보나  HTTP 메시지는 어떻게 전달되는지 메시지의 세 부분(시작줄, 헤더, 바디) 요청/응답 메시지의 차이 요청 메시지가 지원하는 여러가지 메서드 응답 메시지의 여러가지 상태코드 다양한 HTTP 헤더들의 역할  HTTP 메시지는 어떻게 전달 되나  클라이언트 – (프락시(들)) – 서버 사이에서 전달되며 인바운드, 아웃바운드, 업스트림, 다운스트림은 메시지의 전달 방향을 의미한다  인바운드는 서버를 향하는 방향/ 아웃바운드는 클라이언트를 향하는 방향 다운스트림은 메시지가 전달되는 방향(수신지)/ 업스트림은 반대방향(발송지)   메시지의 각 부분 메시지는 세가지 부분으로 나뉜다.</description>
    </item>
    
    <item>
      <title>HTTP–The Definitive Guide, &#39;URls and Resources&#39;</title>
      <link>http://cmygray.github.io/post/til-2018/0120/</link>
      <pubDate>Sat, 20 Jan 2018 17:58:54 +0900</pubDate>
      
      <guid>http://cmygray.github.io/post/til-2018/0120/</guid>
      <description>무엇을?  URL 표기법, 각 구성요소의 의미와 동작 웹 클라이언트가 지원하는 상대, 확장 URL 같은 단축 URL URL 인코딩 &amp;amp; 문자열 규칙 다양한 인터넷 정보시스템을 지원하는 공통 URL scheme 이름을 그대로 유지하면서도 객체를 다른 곳으로 옮길 수 있게 해주는 URN 을 포함한 URL 의 미래  인터넷의 리소스 탐색  앞 장에서 말했듯이, URI ⊃ [URL | URN] 실제 HTTP 애플리케이션은 URL 을 URI 의 일부분으로 취급한다  다시 보는 URL anatomy</description>
    </item>
    
    <item>
      <title>HTTP–The Definitive Guide, &#39;Overview of HTTP&#39;</title>
      <link>http://cmygray.github.io/post/til-2018/0119/</link>
      <pubDate>Fri, 19 Jan 2018 15:29:44 +0900</pubDate>
      
      <guid>http://cmygray.github.io/post/til-2018/0119/</guid>
      <description>무엇을 알아보나?  웹 클라이언트와 서버의 통신 방법 웹 컨텐츠는 어디로부터 오는가 웹의 입출은 어떻게 작동하나 HTTP 통신에서 사용되는 메시지 포맷 TCP 네트워크 전송의 근간 다양한 HTTP 프로토콜 인터넷에 설치된 주요 HTTP 컴포넌트들  클라이언트와 서버  클라이언트는 HTTP 요청을 서버에게 서버는 HTTP 응답을 클라이언트에게  &amp;hellip;?!
리소스; Resource  웹 컨텐츠의 소스 text/ HTML/ Word/ img/ &amp;hellip; software programs that generate content on demand (e.g., 웹 애플리케이션) Anything(!)  미디어 타입  MIME 타입; Multipurpose Internet Mail Extensions  서로 다른 전자우편 시스템 간의 메세지 전송을 위해 고안되었으나 쓸모가 많아서 HTTP 에서도 사용한다 서버가 응답한 오브젝트가 무엇인지 명시하여 브라우저의 대응을 돕는다 오브젝트타입/서브타입 으로 표시 (e.</description>
    </item>
    
    <item>
      <title>데이터 과학을 위한 파이썬 입문: 자료구조</title>
      <link>http://cmygray.github.io/post/til-2018/0111/</link>
      <pubDate>Thu, 11 Jan 2018 18:29:44 +0900</pubDate>
      
      <guid>http://cmygray.github.io/post/til-2018/0111/</guid>
      <description>자료구조 특징이 있는 정보를, 고유의 특징을 보존하며 저장하기 위한 방식.
데이터 구조란, 메모리에 데이터를 효율적으로 관리하는 방법. 효율이란, 검색과 저장 등 작업에서 메모리 사용량과 소요시간을 최소화 하는 것.
파이썬의 기본 자료구조는 List, Tuble, Set, Dictionary가 있음.
 스택/큐 튜플/셋 딕셔너리 (+ 콜렉션)  스택; Stack LIFO, (이벤트 루프에 의해 작동하는 자바스크립트 콜스택도 동일함) push|pop 으로 입,출력.
파이썬은 기본 자료형 List 객체에 append, pop 메소드를 사용하며 별도로 collections 모듈을 사용하기도 함.</description>
    </item>
    
    <item>
      <title>You Don&#39;t Know JS: 프로토타입</title>
      <link>http://cmygray.github.io/post/til-2018/0110/</link>
      <pubDate>Wed, 10 Jan 2018 22:32:56 +0900</pubDate>
      
      <guid>http://cmygray.github.io/post/til-2018/0110/</guid>
      <description>자바스크립트의 중요한 동작원리인 [[Prototype]] 체인과 기존 프로그래밍 언어의 클래스, 객체 지향 패턴을 구분함으로써 오해를 바로잡아주는 한편 어째서 (숱한 개발자들이) 클래스를 통한 객체지향 프로그래밍을 구현하려고 애써왔는지(본문에서는 무려 어거지라고 표현한다!) 궁금하게 만드는 장. 급격하게 팽창한 웹에서 필수적 역할을 했던 자바스크립트에 대해서 &amp;ldquo;가장 오해받는 언어&amp;rdquo;라는 주장을 자주 볼 수 있는데, 이것이 사실인지 항변인지 현재의 나로서는 알 수가 없다. 그 떄문에 객체지향과 클래스를 좀 더 명확하게 알아야 할 필요를 느낀다. 그 수준에 이르면 성능이나 속도, 업계의 수요같은 얕은 요소를 넘어서 더 넓은 시야로 프론트엔드 프레임워크(라이브러리)를 바라볼 수 있을 것 같기 때문이다.</description>
    </item>
    
    <item>
      <title>You Don&#39;t Know JS: 클래스와 객체의 혼합</title>
      <link>http://cmygray.github.io/post/til-2018/0109/</link>
      <pubDate>Tue, 09 Jan 2018 16:17:08 +0900</pubDate>
      
      <guid>http://cmygray.github.io/post/til-2018/0109/</guid>
      <description>앞 장에서 다룬 객체와 이번 장의 내용을 통해 자바스크립트 데이터로써 객체(Object type) 개념보다 확장된, 개발 패턴으로서의 객체 개념을 조금이나마 이해할 수 있었다.
클래스와 객체의 혼합  클래스와 상속은 (&amp;hellip;) 실생활 영역의 문제를 소프트웨어로 모델링 하기 위한 방법이다. (&amp;hellip;) 객체 지향 또는 클래스 지향 프로그래밍에서 (&amp;hellip;) 데이터와 작동을 함께 잘 감싸는 것이 올바른 설계라고 강조한다; Capsulation.
 본문에선 내장 객체 String을 예로 든다. 즉 데이터(문자열 타입)와 관련 동작(문자열 타입 데이터에 필요한 메소드)을 캡슐화한 결과가 바로 자바스크립트의 Native Object, String이다.</description>
    </item>
    
    <item>
      <title>You Don&#39;t Know JS: 객체(마무리)</title>
      <link>http://cmygray.github.io/post/til-2018/0107/</link>
      <pubDate>Sun, 07 Jan 2018 14:53:27 +0900</pubDate>
      
      <guid>http://cmygray.github.io/post/til-2018/0107/</guid>
      <description>객체 객체는 0개 이상의 프로퍼티로 구성되며, 프로퍼티는 데이터 프로퍼티와 접근자 프로퍼티로 나뉜다. 또 ES5부터 모든 프로퍼티는 서술자; Property Descriptor에 의해 표기되며 프로퍼티의 종류에 따라 서술자의 어트리뷰트가 달라진다. 프로퍼티 서술자의 어트리뷰트로는, [[Value]], [[Writable]], [[Configurable]], [[Enumerable]], [[Get]], [[Set]] 등이 있다. 까지가 앞서 살펴본 내용이었다.
 기본적으로 [[Get]] 연산은 주어진 이름의 프로퍼티를 찾아보고 있으면 그 값을 반환한다. 프로퍼티를 찾아보고 없으면 (&amp;hellip;) 다른 중요한 작업을 하도록 정의되어 있는데(&amp;hellip;)
 일반적으로 프로퍼티 접근자를 사용했을 때의 동작을 설명하고 있다.</description>
    </item>
    
    <item>
      <title>You Don&#39;t Know JS: 객체</title>
      <link>http://cmygray.github.io/post/til-2018/0106/</link>
      <pubDate>Sat, 06 Jan 2018 21:40:27 +0900</pubDate>
      
      <guid>http://cmygray.github.io/post/til-2018/0106/</guid>
      <description>객체; Object  In ECMAScript, an object is a collection of zero or more properties each with attributes that determine how each property can be used (&amp;hellip;) Properties are containers that hold other objects, primitive values, or functions.
 {}도 객체요, { msg: &#39;hello world&#39; } 또한 객체다. 객체를 구성하는 프로퍼티는 키와 값으로 구분되며, 객체, 원시값, 함수를 값으로 취한다.
프로퍼티 값의 타입이 함수일 때, 흔히 메소드라고 부른다. 하지만 이런 견해도 있다.</description>
    </item>
    
  </channel>
</rss>