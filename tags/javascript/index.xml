<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on cmygray</title>
    <link>http://cmygray.github.io/tags/javascript/</link>
    <description>Recent content in Javascript on cmygray</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 07 Oct 2017 01:15:36 +0900</lastBuildDate>
    
	<atom:link href="http://cmygray.github.io/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Fundamentals</title>
      <link>http://cmygray.github.io/post/javascript/fundamentals/</link>
      <pubDate>Sat, 07 Oct 2017 01:15:36 +0900</pubDate>
      
      <guid>http://cmygray.github.io/post/javascript/fundamentals/</guid>
      <description>javascript fundamentals recap  지금(작성일 기준)까지 배운 자바스크립트의 기본 내용을 정리. 웹 프로그래밍 튜토리얼과 MDN 자바스크립트 문서를 참고하여 보완. 추가된 항목은 볼드표시해서 구분. ES5를 기준으로 하며, ES6에 해당하는 내용은 상단에 @ES6 표시.  programming 문제 인식 - 작은 문제로 쪼개기 - 쪼개진 문제를 해결 - 해결의 종합 - 문제 해결
Computational thinking을 토대로 위의 절차를 진행하는 것
basic syntax  sentence;구문
&amp;gt; 구문이란 자바스크립트 내의 모든 명령이다. 명령은 세미콜론(;)으로 분리된다.</description>
    </item>
    
    <item>
      <title>콜라츠 추측</title>
      <link>http://cmygray.github.io/post/algorithm/171004_collatz/</link>
      <pubDate>Wed, 04 Oct 2017 14:30:45 +0900</pubDate>
      
      <guid>http://cmygray.github.io/post/algorithm/171004_collatz/</guid>
      <description>문제: 콜라츠 추측 1937년 Collatz란 사람에 의해 제기된 이 추측은, 입력된 수가 짝수라면 2로 나누고, 홀수라면 3을 곱하고 1을 더한 다음, 결과로 나온 수에 같은 작업을 1이 될 때까지 반복할 경우 모든 수가 1이 된다는 추측입니다. 예를 들어, 입력된 수가 6이라면 6→3→10→5→16→8→4→2→1 이 되어 총 8번 만에 1이 됩니다. collatz 함수를 만들어 입력된 수가 몇 번 만에 1이 되는지 반환해 주세요. 단, 500번을 반복해도 1이 되지 않는다면 –1을 반환해 주세요.</description>
    </item>
    
    <item>
      <title>최소값 만들기</title>
      <link>http://cmygray.github.io/post/algorithm/171003_getminsum/</link>
      <pubDate>Tue, 03 Oct 2017 21:40:07 +0900</pubDate>
      
      <guid>http://cmygray.github.io/post/algorithm/171003_getminsum/</guid>
      <description>문제 자연수로 이루어진 길이가 같은 수열 A,B가 있습니다. 최솟값 만들기는 A, B에서 각각 한 개의 숫자를 뽑아 두 수를 곱한 값을 누적하여 더합니다. 이러한 과정을 수열의 길이만큼 반복하여 최종적으로 누적된 값이 최소가 되도록 만드는 것이 목표입니다.
예를 들어 A = [1, 2] , B = [3, 4] 라면 1. A에서 1, B에서 4를 뽑아 곱하여 더합니다. 2. A에서 2, B에서 3을 뽑아 곱하여 더합니다.
수열의 길이만큼 반복하여 최솟값 10을 얻을 수 있으며, 이 10이 최솟값이 됩니다.</description>
    </item>
    
  </channel>
</rss>