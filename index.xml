<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on cmygray</title>
    <link>http://cmygray.github.io/</link>
    <description>Recent content in Home on cmygray</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 20 Oct 2017 00:55:20 +0900</lastBuildDate>
    
	<atom:link href="http://cmygray.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Categories</title>
      <link>http://cmygray.github.io/categories/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://cmygray.github.io/categories/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Tags</title>
      <link>http://cmygray.github.io/tags/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://cmygray.github.io/tags/</guid>
      <description></description>
    </item>
    
    <item>
      <title>171019_TIL</title>
      <link>http://cmygray.github.io/post/til/171019_til/</link>
      <pubDate>Fri, 20 Oct 2017 00:55:20 +0900</pubDate>
      
      <guid>http://cmygray.github.io/post/til/171019_til/</guid>
      <description>17.10.19.(목) DONE  todo list 실습
 input 요소에 입력된 문자열을 리스트 아이템으로 추가하여 할일 목록을 만드는 페이지를 vanilla로 구현 부트스트랩 ui가 적용된 html과 css를 참고하여 추가, 제거, 완료체크 기능을 객체 데이터를 참조하여 렌더링 하는 방식(MVP)으로 구현
 HTML 커스텀 데이터 어트리뷰트 사용하기 data-*=&amp;quot;value&amp;quot;
 HTML 요소에 &amp;lsquo;data-&amp;lsquo;를 prefix로 하는 attibute를 부여할 수 있다
 해당 값은 node의 dataset 프로퍼티에 객체 형태로 저장된다
 MVP 개념 숙지
참조 데이터(예제의 todos 객체)로만 View를 변경하여야한다.</description>
    </item>
    
    <item>
      <title>Ajax</title>
      <link>http://cmygray.github.io/post/javascript/ajax/</link>
      <pubDate>Wed, 18 Oct 2017 23:54:05 +0900</pubDate>
      
      <guid>http://cmygray.github.io/post/javascript/ajax/</guid>
      <description>Ajax Asyncronous Javascript and XML
비동기 통신을 이용한 웹 개발 기법

목적
 네트워크 블로킹 상태 억제. 사용성 증대, 패킷 절약.  효용
 페이지의 일부만 갱신 가능. 서버와 통신중에도 방해받지 않음.  방법
 서버와의 통신경과와 전송 데이터와 관련된 동작 스크립트의 실행컨텍스트를 이벤트 루프가 컨트롤하도록 한다. (DOM 객체 수정 스크립트의 실행컨텍스트를 사용자와 페이지 간 인터렉션에 의해 이벤트 루프가 컨트롤 하듯.) XMLHttpRequest 객체와 메소드가 이를 지원한다. 요청을 위해서는 먼저 request 객체를 생성, 요청에 관한 정보를 담아 완성 후 전송한다.</description>
    </item>
    
    <item>
      <title>171018_TIL</title>
      <link>http://cmygray.github.io/post/til/171018_til/</link>
      <pubDate>Wed, 18 Oct 2017 23:53:04 +0900</pubDate>
      
      <guid>http://cmygray.github.io/post/til/171018_til/</guid>
      <description>17.10.18.(수) DONE 알고리즘 퀴즈 리팩토링
 String.prototype 메소드로 수식을 만들고, eval()로 연산하기  자릿수끼리 연산이 필요할 때, 문자열 메소드를 사용해서 split하고, join 시 seperator로 연산자를 문자열 형태로 전달하여 수식을 만들 수 있다. (예) 자릿수 더하기: number.toString().split(&#39;&#39;).join(&#39;+&#39;) =&amp;gt; eval()  concat(value), push(value), arr[length] = value의 성능을 비교하고 push를 concat으로 바꿔서 재작성  concat()  가장 빠르다 반복 추가 시 항상 재할당을 해야한다. 때문에 삼항연산자 사용이 용이하다.
arr2 = condition ? arr1.</description>
    </item>
    
    <item>
      <title>171017_TIL</title>
      <link>http://cmygray.github.io/post/til/171017_til/</link>
      <pubDate>Wed, 18 Oct 2017 23:52:57 +0900</pubDate>
      
      <guid>http://cmygray.github.io/post/til/171017_til/</guid>
      <description>17.10.17.(화) DONE javascript Event, Ajax, REST 어제 예습하며 궁금했던 점들 해결 이벤트 발생 시점, 즉 이벤트큐로 함수가 이동할 때 e.clientX의 값이 저장되는 것인지? 만약 그렇지 않다면 콜스택으로 쌓이기까지의 시간동안 참조값이 바뀔 수도 있는데.. &amp;gt; 이벤트 발생과 동시에 이벤트 객체에 관련 프로퍼티의 값이 할당된다. event.which? &amp;gt; 클릭 이벤트의 프로퍼티 which는 클릭 시 사용된 마우스의 버튼을 숫자값으로 나타낸다.   TOTO google newslab fellowship 지원서 작성  // 인접한 요소끼리 반복연산에 reduce 메소드 사용하기 e.</description>
    </item>
    
    <item>
      <title>171016_TIL</title>
      <link>http://cmygray.github.io/post/til/171016_til/</link>
      <pubDate>Tue, 17 Oct 2017 00:13:28 +0900</pubDate>
      
      <guid>http://cmygray.github.io/post/til/171016_til/</guid>
      <description>17.10.16.(월) DONE  javascript DOM, Asynchronous processing model, Event preview: javascript Event, Ajax, REST API, SPA  Event preview
  Event queue로 함수가 이동하는 시점: 바인딩 이벤트 발생 캡쳐링/버블링을 이벤트핸들러 메소드의 세번째 인수에 불린값으로 전달하여 Event queue에 쌓이는 순서를 조정한다(?) 요소에 이벤트리스너를 추가하면, 해당 이벤트가 자식 요소에서 발생하더라도 핸들링이 가능. 이때 e.target == 자식, e.currentTarget == this == 바인딩요소 e는 이벤트메서드의 콜백함수의 첫번째 인자인 이벤트객체를 의미한다. 암거나 써도 됨.</description>
    </item>
    
    <item>
      <title>javascript deep-dive summary</title>
      <link>http://cmygray.github.io/post/javascript/deep-dive/</link>
      <pubDate>Mon, 16 Oct 2017 01:38:59 +0900</pubDate>
      
      <guid>http://cmygray.github.io/post/javascript/deep-dive/</guid>
      <description>10월 10일 - 12일 간 배운 자바스크립트 deep-dive에 대한 정리 웹 프로그래밍 튜토리얼과 MDN 자바스크립트 문서를 참고. ES5를 기준으로 하며, ES6에 해당하는 내용은 상단에 @ES6 표시.  
1. Built in Object  오브젝트의 구조
 Host obj(user-made) Built in obj  Standard(global objects of window;global object) Native  BOM DOM    구성 순서: Standards -&amp;gt; Native
  2. Standard built-in Object  구조  Global Object(window;js | global;node)  Global Objects: Object, Function, Boolean, Number, String &amp;hellip;    표준 빌트인 객체에는 글로벌 오브젝트인 윈도우와, 윈도우에 속하는 나머지 글로벌 오브젝트&amp;rsquo;들&amp;rsquo;이 있다.</description>
    </item>
    
    <item>
      <title>171015_TIL</title>
      <link>http://cmygray.github.io/post/til/171015_til/</link>
      <pubDate>Mon, 16 Oct 2017 01:38:44 +0900</pubDate>
      
      <guid>http://cmygray.github.io/post/til/171015_til/</guid>
      <description> 17.10.15.(일) DONE  통계가 빨라지는 수학력을 드디어 다 읽었다 JS summary
built-in objects/methods, execution context, closure 등 이번주에 다뤘던 내용들 정리 &amp;gt; 블로그에도 업로드 하였다. DOM, Ajax를 아주 빠르게 훑어봤다. &amp;gt; summary를 아주그냥 쓸데없이 열심히 해서 시간이 모자랐다. 어제 분명 앞으로 다룰 부분에 집중키로 했건만.. 역시 하기 싫은 일이 있으면 다른 일을 열심히 하는것&amp;hellip;.  TODO JS Built-in summary DOM, Ajax 예습 recharted 사이트 구상 google newslab fellowship 지원서 작성  </description>
    </item>
    
    <item>
      <title>171014_TIL</title>
      <link>http://cmygray.github.io/post/til/171014_til/</link>
      <pubDate>Sun, 15 Oct 2017 14:31:25 +0900</pubDate>
      
      <guid>http://cmygray.github.io/post/til/171014_til/</guid>
      <description>17.10.14.(토) DONE  알고리즘 스터디: sum(n) 재귀문, fibo(n) 반복문, Dynamic programming(memorization, bottom up)   변수 이름에 대한 고민과 다이내믹 프로그래밍을 위한 방법 등을 나눴다.
  통계가 빨라지는 수학력
확률변수와 확률분포, 기댓값, 확률변수의 분산과 표준편차, 표준화, 기댓값의 합과 곱, 연속형 확률변수를 위한 극한과 미적분
 특정 값을 얻을 확률이 정해져있는 변수를 확률변수라고 한다. 각 확률변수에 대한 확률의 대응관계를 확률분포라 한다. 기댓값은 확률변수와 각 확률의 곱의 합이다. V(X) = E({X - E(X)}^2) = E(X^2) - {E(X)}^2 s(X) = sqrt(V(X)) Y = aX + b 일때,  E(Y) = a * E(X) + b V(Y) = a^2 * V(X) s(Y) = a * s(X)  Z = {X - E(X)} / s(X) &amp;ldquo;확률변수의 표준화&amp;rdquo;</description>
    </item>
    
    <item>
      <title>171012_TIL</title>
      <link>http://cmygray.github.io/post/til/171012_til/</link>
      <pubDate>Fri, 13 Oct 2017 00:11:59 +0900</pubDate>
      
      <guid>http://cmygray.github.io/post/til/171012_til/</guid>
      <description>17.10.12.(목) DONE  javascript deep-dive: Excution context, Closure, OOP javascript algorithm quiz(간단한 문제 7가지) 일일알고리즘- 다트 게임 js로 완료!!!!! Angular2, React 데모 영상 몇개를 살펴봤다. 단지 나중의 거부감을 방지하기 위한 목적으로다가&amp;hellip;  TODO recharted 사이트 구상 google newslab fellowship 지원서 작성   정규표현식과 Array 메소드를 배우고서, 문자열 처리에 애먹었던 카카오 공채 알고리즘 퀴즈 2번 문제(다트게임)를 드디어 풀어냈다!! 두시간 정도 걸린데다 가독성이 좋은지 의문이 남지만 어쨌든 해결. 차차 리팩토링을 할 것이다.</description>
    </item>
    
    <item>
      <title>다트 게임(카카오 코딩테스트)</title>
      <link>http://cmygray.github.io/post/algorithm/171012_dart_game/</link>
      <pubDate>Thu, 12 Oct 2017 22:31:49 +0900</pubDate>
      
      <guid>http://cmygray.github.io/post/algorithm/171012_dart_game/</guid>
      <description>문제 카카오톡 신입 공채 1차 코딩테스트 2번 문제입니다.
 다트 게임은 총 3번의 기회로 구성된다. 각 기회마다 얻을 수 있는 점수는 0점에서 10점까지이다. 점수와 함께 Single(S), Double(D), Triple(T) 영역이 존재하고 각 영역 당첨 시 점수에서 1제곱, 2제곱, 3제곱 (점수^1 , 점수^2 , 점수^3 )으로 계산된다. 옵션으로 스타상(*) , 아차상(#)이 존재하며 스타상(*) 당첨 시 해당 점수와 바로 전에 얻은 점수를 각 2배로 만든다. 아차상(#) 당첨 시 해당 점수는 마이너스된다. 스타상(*)은 첫 번째 기회에서도 나올 수 있다.</description>
    </item>
    
    <item>
      <title>What&#39;s going on in this graph?: 시작하며</title>
      <link>http://cmygray.github.io/post/infoviz/readme/</link>
      <pubDate>Thu, 12 Oct 2017 00:26:07 +0900</pubDate>
      
      <guid>http://cmygray.github.io/post/infoviz/readme/</guid>
      <description>뉴욕타임즈에서 학생들의 토론학습을 위해 제공하는 What&amp;rsquo;s Going On in This Graph? 번역 및 그래프 리뷰입니다. 보도했던 기사의 그래프 이미지를 본문은 생략한 채로 먼저 공개하고, 몇가지 질문에 대해 코멘트를 제출하면 이후 본문을 공개하는 방식의 컨텐츠입니다. 뉴스를 위한 데이터 시각화를 알아보고자 작성을 시작했으며 본문 번역과 제 의견, 가능하다면 해당 그래프 유형에 대한 정보까지 추가하려고 합니다.</description>
    </item>
    
    <item>
      <title>171011_TIL</title>
      <link>http://cmygray.github.io/post/til/171011_til/</link>
      <pubDate>Thu, 12 Oct 2017 00:24:17 +0900</pubDate>
      
      <guid>http://cmygray.github.io/post/til/171011_til/</guid>
      <description>17.10.11.(수) DONE  javascript built-in object: Number, Math, RegExp, Array javascript algorithm quiz(weird case, numPY) using regexp. javascript preview: Execution context, Closure, OOP 일일 알고리즘- 등차수열 합계함수(재귀) nyt, &amp;ldquo;what&amp;rsquo;s going on in this graph?&amp;rdquo; 171009 일부 번역  TODO recharted 사이트 구상 google newslab fellowship 지원서 작성    바빠서 그래프를 못그리면 읽기라도 더 하려고, 이왕이면 양질의 그래프를 읽으려고 번역까지 덧붙여 NYT 그래프 리뷰를 시작했다. 집중해서 뭐든지 빨아들일 기세였는데 연휴 지나고나니 늘어지고 수동적인 느낌이다.</description>
    </item>
    
    <item>
      <title>171010_TIL</title>
      <link>http://cmygray.github.io/post/til/171010_til/</link>
      <pubDate>Tue, 10 Oct 2017 23:32:37 +0900</pubDate>
      
      <guid>http://cmygray.github.io/post/til/171010_til/</guid>
      <description>17.10.10.(화) DONE  javascript built-in object: Standards, String, Date javascript homework: algorithm quiz(8찾기, 요일찾기, 홀짝, 알파스트링) javascript preview: Number, Math, RegExp 일일 알고리즘- 야근 지수 py  TODO recharted 사이트 구상 google newslab fellowship 지원서 작성    그동안 알고리즘을 풀면서 2중 반복문을 습관적으로 사용했는데, 실습 알고리즘을 풀면서 1중 반복문을 두번 사용하며 가독성을 높이는 방법을 배웠다. 코드 작성 전 로직을 고민할 때 항상 이 부분을 염두에 둬야겠다는 생각. 또 eslint를 적극적으로 수용해서 변수 선언문을 죄다 수정하는 것도 처음 해봤는데 틈틈이 해보는 것이 ES6와 typescript 대비에 좋을 것 같다.</description>
    </item>
    
    <item>
      <title>야근 지수</title>
      <link>http://cmygray.github.io/post/algorithm/171010_overwork/</link>
      <pubDate>Tue, 10 Oct 2017 23:31:35 +0900</pubDate>
      
      <guid>http://cmygray.github.io/post/algorithm/171010_overwork/</guid>
      <description>문제 야근 지수
회사원인 수민이는 많은 일이 쌓여 있습니다. 수민이는 야근을 최소화하기 위해 남은 일의 작업량을 숫자로 메기고, 일에 대한 야근 지수를 줄이기로 결정했습니다. 야근 지수는 남은 일의 작업량을 제곱하여 더한 값을 의미합니다. 수민이는 1시간 동안 남은 일 중 하나를 골라 작업량 1만큼 처리할 수 있습니다. 수민이의 퇴근까지 남은 N 시간과 각 일에 대한 작업량이 있을 때, noOvertime 함수를 제작하여 수민이의 야근 지수를 최소화 한 결과를 출력해 주세요. 예를 들어, N=4 일 때, 남은 일의 작업량이 [4, 3, 3] 이라면 야근 지수를 최소화하기 위해 일을 한 결과는 [2, 2, 2]가 되고 야근 지수는 22 + 22 + 22 = 12가 되어 12를 반환해 줍니다.</description>
    </item>
    
    <item>
      <title>다음 큰 수 찾기</title>
      <link>http://cmygray.github.io/post/algorithm/171008_next_big_number/</link>
      <pubDate>Sun, 08 Oct 2017 19:21:15 +0900</pubDate>
      
      <guid>http://cmygray.github.io/post/algorithm/171008_next_big_number/</guid>
      <description>문제 어떤 수 N(1≤N≤1,000,000) 이 주어졌을 때, N의 다음 큰 숫자는 다음과 같습니다.
 N의 다음 큰 숫자는 N을 2진수로 바꾸었을 때의 1의 개수와 같은 개수로 이루어진 수입니다. 1번째 조건을 만족하는 숫자들 중 N보다 큰 수 중에서 가장 작은 숫자를 찾아야 합니다.  예를 들어, 78을 2진수로 바꾸면 1001110 이며, 78의 다음 큰 숫자는 83으로 2진수는 1010011 입니다. N이 주어질 때, N의 다음 큰 숫자를 찾는 nextBigNumber 함수를 완성하세요.</description>
    </item>
    
    <item>
      <title>171008_TIL</title>
      <link>http://cmygray.github.io/post/til/171008_til/</link>
      <pubDate>Sun, 08 Oct 2017 19:20:27 +0900</pubDate>
      
      <guid>http://cmygray.github.io/post/til/171008_til/</guid>
      <description> 17.10.08.(일) DONE  일일 알고리즘- 다음 큰 숫자 py, js 통계가 빨라지는 수학력 집합까지  TODO (연휴간) 통계가 빨라지는 수학력 끝내기 js preview- execution context, closure, OOP 데이터 사이언스 스쿨 파이썬 6절, 7절 recharted 사이트 구상  </description>
    </item>
    
    <item>
      <title>171007_TIL</title>
      <link>http://cmygray.github.io/post/til/171007_til/</link>
      <pubDate>Sun, 08 Oct 2017 00:32:58 +0900</pubDate>
      
      <guid>http://cmygray.github.io/post/til/171007_til/</guid>
      <description> 17.10.07.(토) DONE  일일 알고리즘- N개의 최소공배수 리팩토링. (py, js) js fundamentals recap 완료 통계가 빨라지는 수학력 3장(상관관계를 알기 위한 수학)까지 완료  TODO (연휴간) 통계가 빨라지는 수학력 끝내기 js preview- execution context, closure, OOP 데이터 사이언스 스쿨 파이썬 6절, 7절 recharted 사이트 구상  </description>
    </item>
    
    <item>
      <title>171006_TIL</title>
      <link>http://cmygray.github.io/post/til/171006_til/</link>
      <pubDate>Sat, 07 Oct 2017 01:17:04 +0900</pubDate>
      
      <guid>http://cmygray.github.io/post/til/171006_til/</guid>
      <description> 17.10.06.(금) DONE  js fundamentals recap. 수업 log 다시보기. (scope 전까지)  TODO (연휴간) js fundamentals recap 끝내기 통계가 빨라지는 수학력 끝내기 데이터 사이언스 스쿨 파이썬 6절, 7절 recharted 사이트 구상  </description>
    </item>
    
    <item>
      <title>javascript fundamentals summary</title>
      <link>http://cmygray.github.io/post/javascript/fundamentals/</link>
      <pubDate>Sat, 07 Oct 2017 01:15:36 +0900</pubDate>
      
      <guid>http://cmygray.github.io/post/javascript/fundamentals/</guid>
      <description>수정내역
10.07. scope, this 내용 보충
 지금(작성일 기준)까지 배운 자바스크립트의 기본 내용을 정리. 웹 프로그래밍 튜토리얼과 MDN 자바스크립트 문서를 참고하여 보완. 추가된 항목은 볼드표시해서 구분. ES5를 기준으로 하며, ES6에 해당하는 내용은 상단에 @ES6 표시.  programming 문제 인식 - 작은 문제로 쪼개기 - 쪼개진 문제를 해결 - 해결의 종합 - 문제 해결
Computational thinking을 토대로 위의 절차를 진행하는 것
basic syntax  sentence;구문
구문이란 자바스크립트 내의 모든 명령이다. 명령은 세미콜론(;)으로 분리된다.</description>
    </item>
    
    <item>
      <title>171005_TIL</title>
      <link>http://cmygray.github.io/post/til/171005_til/</link>
      <pubDate>Thu, 05 Oct 2017 23:35:46 +0900</pubDate>
      
      <guid>http://cmygray.github.io/post/til/171005_til/</guid>
      <description> 17.10.05.(목) DONE  일일 알고리즘- N개의 최소공배수 py (오답) MDN javascript 안내서 중 객체 모델의 세부사항 부문 읽고 번역 일부 수정 js fundamentals recap. 객체, this 내용 추가 구문 읽기
아래 코드의 명령실행 순서와 스택  function foo(i) { if (i &amp;lt; 0) return; console.log(&amp;#39;begin:&amp;#39; + i); foo(i - 1); console.log(&amp;#39;end:&amp;#39; + i); } foo(3);  TODO (연휴간) js fundamentals recap - 수업 log와 비교 통계가 빨라지는 수학력 끝내기 데이터 사이언스 스쿨 파이썬 6절, 7절 recharted 사이트 구상 구문 읽기  </description>
    </item>
    
    <item>
      <title>N개의 최소공배수</title>
      <link>http://cmygray.github.io/post/algorithm/171005_nlcm/</link>
      <pubDate>Thu, 05 Oct 2017 15:05:30 +0900</pubDate>
      
      <guid>http://cmygray.github.io/post/algorithm/171005_nlcm/</guid>
      <description>문제 두 수의 최소공배수(Least Common Multiple)란 입력된 두 수의 배수 중 공통이 되는 가장 작은 숫자를 의미합니다. 예를 들어 2와 7의 최소공배수는 14가 됩니다. 정의를 확장해서, n개의 수의 최소공배수는 n 개의 수들의 배수 중 공통이 되는 가장 작은 숫자가 됩니다. nlcm 함수를 통해 n개의 숫자가 입력되었을 때, 최소공배수를 반환해 주세요. 예를들어 [2,6,8,14] 가 입력된다면 168을 반환해 주면 됩니다.
풀이  가장 큰 수에 1,2,3&amp;hellip;배 한 값에 대해 다른 수의 나머지 체크 &amp;gt; 연산시간 초과로 실패</description>
    </item>
    
    <item>
      <title>171004_TIL</title>
      <link>http://cmygray.github.io/post/til/171004_til/</link>
      <pubDate>Thu, 05 Oct 2017 00:32:23 +0900</pubDate>
      
      <guid>http://cmygray.github.io/post/til/171004_til/</guid>
      <description>17.10.04.(수) DONE  일일 알고리즘- 콜라츠 추측 py, js js fundamentals recap MDN 문서 반영까지 완료 &amp;gt; MDN 참고문서를 보면서 빠진 내용을 살펴봤으며, 특히 프로토타입을 들여다봤다. 다른 생성자의 인스턴스를 프로토타입으로 할당하여 계층구조를 만드는 방법과, 생성자 호출 시 인수가 없더라도 기본값을 갖도록 || 연산자를 사용하는 방법을 알았다. 생성자의 매개변수에 =연산자를 사용하여 기본값을 부여하는 방법과의 차이는 없나 궁금.  TODO (연휴간) js fundamentals recap - MDN 문서 남은 페이지 마저 반영하고 log와 비교 통계가 빨라지는 수학력 끝내기 데이터 사이언스 스쿨 파이썬 6절, 7절 recharted 사이트 구상 구문 읽기  function foo(i) { if (i &amp;lt; 0) return; console.</description>
    </item>
    
    <item>
      <title>콜라츠 추측</title>
      <link>http://cmygray.github.io/post/algorithm/171004_collatz/</link>
      <pubDate>Wed, 04 Oct 2017 14:30:45 +0900</pubDate>
      
      <guid>http://cmygray.github.io/post/algorithm/171004_collatz/</guid>
      <description>문제: 콜라츠 추측 1937년 Collatz란 사람에 의해 제기된 이 추측은, 입력된 수가 짝수라면 2로 나누고, 홀수라면 3을 곱하고 1을 더한 다음, 결과로 나온 수에 같은 작업을 1이 될 때까지 반복할 경우 모든 수가 1이 된다는 추측입니다. 예를 들어, 입력된 수가 6이라면 6→3→10→5→16→8→4→2→1 이 되어 총 8번 만에 1이 됩니다. collatz 함수를 만들어 입력된 수가 몇 번 만에 1이 되는지 반환해 주세요. 단, 500번을 반복해도 1이 되지 않는다면 –1을 반환해 주세요.</description>
    </item>
    
    <item>
      <title>171003_TIL</title>
      <link>http://cmygray.github.io/post/til/171003_til/</link>
      <pubDate>Tue, 03 Oct 2017 23:35:06 +0900</pubDate>
      
      <guid>http://cmygray.github.io/post/til/171003_til/</guid>
      <description>17.10.03.(화) DONE  일일 알고리즘- 최소값 만들기 py, js js fundamentals recap (진행중)   튜토리얼 페이지에서 목차 틀 가져오기 -&amp;gt; 생각나는대로 정의, 관련 내용 추가 -&amp;gt; MDN 참고문서를 보면서 빠진 내용 추가 하는 중.
  facebook graph api 사용해서 포스트 댓글을 json으로 추출하기   며느라기 페이지에서 만화를 보다가, 2시간만에 700개에 육박하는 댓글을 보고 호기심이 생겨서 댓글을 모아봤다. 텍스트 분석은 어차피 못하니깐 워드클라우드나 한번 만들어보려고 했지만 주피터 파이썬에서 json 로드에 실패해서 중단.</description>
    </item>
    
    <item>
      <title>최소값 만들기</title>
      <link>http://cmygray.github.io/post/algorithm/171003_getminsum/</link>
      <pubDate>Tue, 03 Oct 2017 21:40:07 +0900</pubDate>
      
      <guid>http://cmygray.github.io/post/algorithm/171003_getminsum/</guid>
      <description>문제 자연수로 이루어진 길이가 같은 수열 A,B가 있습니다. 최솟값 만들기는 A, B에서 각각 한 개의 숫자를 뽑아 두 수를 곱한 값을 누적하여 더합니다. 이러한 과정을 수열의 길이만큼 반복하여 최종적으로 누적된 값이 최소가 되도록 만드는 것이 목표입니다.
예를 들어 A = [1, 2] , B = [3, 4] 라면 1. A에서 1, B에서 4를 뽑아 곱하여 더합니다. 2. A에서 2, B에서 3을 뽑아 곱하여 더합니다.
수열의 길이만큼 반복하여 최솟값 10을 얻을 수 있으며, 이 10이 최솟값이 됩니다.</description>
    </item>
    
    <item>
      <title>170930_TIL_js</title>
      <link>http://cmygray.github.io/post/til/170930_til_js/</link>
      <pubDate>Mon, 02 Oct 2017 19:09:44 +0900</pubDate>
      
      <guid>http://cmygray.github.io/post/til/170930_til_js/</guid>
      <description> 17.09.30.(토) DONE  javascript fundamentals recap(draft) 블로그에 TIL 업로드  TODO 헥소 블로그 테마적용 문제 해결(hexo-renderer-bourbon 설치문제) 일일알고리즘  </description>
    </item>
    
    <item>
      <title>170929_TIL_js</title>
      <link>http://cmygray.github.io/post/til/170929_til_js/</link>
      <pubDate>Mon, 02 Oct 2017 19:09:42 +0900</pubDate>
      
      <guid>http://cmygray.github.io/post/til/170929_til_js/</guid>
      <description> 17.09.29.(금) DONE  일일 알고리즘 시저 암호 python으로 완료 &amp;gt; 풀긴 풀었지만 문자열 내장함수를 알았다면 더 간단하게 풀었을 것이고, 쓸데없는 이터레이션을 줄이려면 차분한 생각 OR 리팩토링이 필요하다~ 헥소 블로그 테마 적용(실패&amp;hellip;)  TODO  알고스터디 헥소 블로그 테마적용 문제 해결.. javascript fundamental recap  </description>
    </item>
    
    <item>
      <title>170928_TIL_js</title>
      <link>http://cmygray.github.io/post/til/170928_til_js/</link>
      <pubDate>Mon, 02 Oct 2017 19:09:40 +0900</pubDate>
      
      <guid>http://cmygray.github.io/post/til/170928_til_js/</guid>
      <description> 17.09.28.(목) DONE  일일 알고리즘. 카카오 코딩테스트 문제 1번 &amp;ldquo;비밀지도&amp;rdquo; 완료. (py) &amp;gt; bit 연산 안되는데 어떻게 한다는건지 모르겠다&amp;hellip; 일단 품 js는 내일&amp;hellip; JS preview: Scope, this, Prototype  </description>
    </item>
    
    <item>
      <title>170927_TIL_js</title>
      <link>http://cmygray.github.io/post/til/170927_til_js/</link>
      <pubDate>Mon, 02 Oct 2017 19:09:37 +0900</pubDate>
      
      <guid>http://cmygray.github.io/post/til/170927_til_js/</guid>
      <description>17.09.27.(수) DONE  for 퀴즈를 풀고 JS loop optimization 자료를 찾아봤다.   optimizing 관련해서 다른 케이스도 많은데, 반복문 외에는 아직 익숙치 않으니 나중에 다시 참고하기로 했다. 아래 코드 참고.
 var array = [1,2,3] //배열의 길이 3을 활용한 루프 코드블록 3가지의 속도 비교 //1. standard: 루프마다 조건식을 연산 for (var i = 0; i &amp;lt; array.length; i++) {}; //2. faster: 조건식 결과를 변수에 할당 for (var i = 0, len = array.</description>
    </item>
    
    <item>
      <title>170926_TIL_js</title>
      <link>http://cmygray.github.io/post/til/170926_til_js/</link>
      <pubDate>Mon, 02 Oct 2017 19:09:35 +0900</pubDate>
      
      <guid>http://cmygray.github.io/post/til/170926_til_js/</guid>
      <description> 17.09.26.(화) DONE  알고리즘 퀴즈- 소수 찾기 JS for-loop-quiz 완료 js basic recap (chapter 4)  TODO js basic 예습 Lesson 7,8,9,10 js basic 복습 Lesson 4,5,6 js basic chap4 recap check, chap5,6 recap  </description>
    </item>
    
    <item>
      <title>170925_TIL_js</title>
      <link>http://cmygray.github.io/post/til/170925_til_js/</link>
      <pubDate>Mon, 02 Oct 2017 19:09:33 +0900</pubDate>
      
      <guid>http://cmygray.github.io/post/til/170925_til_js/</guid>
      <description>17.09.25.(월) DONE  알고리즘 퀴즈- 괄호 확인하기, self_number js basic. Intro ~ Data type &amp;amp; variable  TODO js basic 예습 Operator ~ immutability &amp;ndash; control flow까지 완료 megabrain 코딩테스트 CSS 풀어보기 js basic 복습 intro ~ Data type &amp;amp; variable   알고리즘 퀴즈를 절차대로 꾸역꾸역 짜다보면 코드가 완성되긴 하는데, 이게 계산기 두드리는건지 코드를 짜는건지 좀 헷갈린다. 재밌어서 자꾸 하게되는데 메인함수도 만들 줄 모르고 주피터로 줄줄줄 써내려가는데 이게 맞는 공부법인지 의문&amp;hellip;</description>
    </item>
    
    <item>
      <title>170924_TIL_js</title>
      <link>http://cmygray.github.io/post/til/170924_til_js/</link>
      <pubDate>Mon, 02 Oct 2017 19:09:31 +0900</pubDate>
      
      <guid>http://cmygray.github.io/post/til/170924_til_js/</guid>
      <description> 17.09.24.(일) DONE  알고리즘 퀴즈- 2016년(py, js), 소수찾기(py) js 공부- data type &amp;amp; variable  데이터형에 따른 immutability, 변수 재 할당의 차이 이해 &amp;gt; Symbol 자료형이 할당된 변수명을 key로 갖는 경우 | Symbol 자료형의 리터럴을 key로 갖는 경우, 둘의 차이는?   TODO megabrain 코딩테스트 CSS 풀어보기   예비군 훈련에 약속까지 있어서 알고리즘만 조금 건드린 하루
 </description>
    </item>
    
    <item>
      <title>170923_TIL_js</title>
      <link>http://cmygray.github.io/post/til/170923_til_js/</link>
      <pubDate>Mon, 02 Oct 2017 19:09:28 +0900</pubDate>
      
      <guid>http://cmygray.github.io/post/til/170923_til_js/</guid>
      <description> 17.09.23.(토) DONE  m사 알고리즘 퀴즈에 도전.. 주피터 노트북으로 스텝별 함수만 만들고 메인함수로 묶는건 몰라서 패스- poiemaweb 참고해서 자바스크립트 데이터타입, 변수 학습.  TODO 어제에 이어서-
js tutorial 보기 w3c grid doc 빠르게 훑기   알고리즘 퀴즈를 파이썬, 자바스크립트로 한번씩 풀고 있는데 내장함수를 전부 파악하지 않은 채로 무작정 풀다보니, 내장함수를 몰랐던 것 뿐인데 언어 간 차이라고 넘겨짚는 문제가 발생. 쉬운 것부터 차근차근, 내장함수 목록을 확인하면서 풀기로.
 </description>
    </item>
    
    <item>
      <title>170922_TIL_html_css</title>
      <link>http://cmygray.github.io/post/til/170922_til_html_css/</link>
      <pubDate>Mon, 02 Oct 2017 19:09:21 +0900</pubDate>
      
      <guid>http://cmygray.github.io/post/til/170922_til_html_css/</guid>
      <description>17.09.22.(금) DONE  알고리즘- 하샤드 수 (py, js) &amp;gt; 파이썬이 js보다 훨씬 쉬운게 함정.. 아직 쉬운난이도이기도 하고 단순히 익숙함의 차이인듯 fds HTML/CSS 마지막 수업  { position: sticky;} 속성과 미지원 브라우저 솔루션 jquery로 메뉴 트랜지션 반응형 레이아웃에서 구현하기 &amp;gt; 제이쿼리는 찾아가면서 더듬더듬은 작성할 수 있게 됨. 적어도 첫 줄 레디함수는 안막힌다&amp;hellip; 특히 클래스 선택할 때 / add-remove시 점 안찍게 주의해야 한다. 한 요소에 클래스가 여러개일때 하위 클래스가 아니라 추가된 클래스로 착각하기 십상이라 모듈화가 아직 어색하다.</description>
    </item>
    
    <item>
      <title>170921_TIL_html_css</title>
      <link>http://cmygray.github.io/post/til/170921_til_html_css/</link>
      <pubDate>Mon, 02 Oct 2017 19:09:19 +0900</pubDate>
      
      <guid>http://cmygray.github.io/post/til/170921_til_html_css/</guid>
      <description> 17.09.21.(목) DONE  fds 반응형웹 구현연습- 미디어쿼리로 스타일 시트 내부에서 분기하여 공통, 상황별 스타일 적용, 접근성 향상을 위한 건너뛰기 인터페이스 만들기 알고리즘- 삼각형 출력하기, 핸드폰번호 가리기 (py, js)  TODO(아마 주말까지?) 알고리즘 레벨 살짝 건너뛰어 해보기 html, css 수업내용 정리 w3c grid doc 빠르게 훑기  </description>
    </item>
    
    <item>
      <title>170920_TIL_html_css</title>
      <link>http://cmygray.github.io/post/til/170920_til_html_css/</link>
      <pubDate>Mon, 02 Oct 2017 19:09:16 +0900</pubDate>
      
      <guid>http://cmygray.github.io/post/til/170920_til_html_css/</guid>
      <description>17.09.20.(수) DONE  fds: IR 기법 마무리, transition, @keyframes, 클래스 모듈화, 인용태그, &amp;lt;address&amp;gt; 태그  { height: 0; } | { height: nnpx; padding-top: nnpx; }     box-sizing 의 값에 따라서 달라진다.
  MDN CSS Visual Formatting Model 문서 눈꼽 번역. normal flow, float, absolute 이해 크롬 홈화면(구글어스) 메뉴 탭 트랜지션만 빼고 구현   무작정 하다가 코드가 엄청 더러워지는 참사 발생&amp;hellip; count함수로 fontello 글리프를 불러올 순 없는지 궁금.</description>
    </item>
    
    <item>
      <title>170919_TIL_html_css</title>
      <link>http://cmygray.github.io/post/til/170919_til_html_css/</link>
      <pubDate>Mon, 02 Oct 2017 19:09:13 +0900</pubDate>
      
      <guid>http://cmygray.github.io/post/til/170919_til_html_css/</guid>
      <description> 17.09.19.(화) DONE  웹접근성 권고 표준에 대해서 배웠다. WCAC, KWCAG 가이드라인. ARIA 스펙으로 웹 접근성을 높이는 마크업에 대해서 배웠다. 웹 접근성을 높이기위한 CSS IR(Image Replacement) 테크닉 배움.  padding-top: height;로 내보내기 position: absolute;로 가리기  background-position: 000px; 속성으로 sprite 이미지 사용하기. MDN &amp;lt;article&amp;gt; 문서 일부 번역 HTML sectioning, heading content 의 역할 스펙 확인  TODO hexo blog 만들기 grid 조부모 엘리먼트 참조시키는 법 알아내기 - 안되는 것으로 밝혀짐&amp;hellip;  </description>
    </item>
    
    <item>
      <title>170918_TIL_html_css</title>
      <link>http://cmygray.github.io/post/til/170918_til_html_css/</link>
      <pubDate>Mon, 02 Oct 2017 19:09:09 +0900</pubDate>
      
      <guid>http://cmygray.github.io/post/til/170918_til_html_css/</guid>
      <description>17.09.18.(월) DONE  webcafe 페이지 게시판, 새소식 마크업 / 스타일 적용  click, focusin 이벤트 사용해서 jquery로 게시판별 활성화/비활성화 기능 구현 임시 비활성화 클래스를 만들어서 분기해두고 활성/비활성 메뉴 구현하는 요령 white-space, overflow, text-overflow 태그로 넘치는 텍스트 처리 min-height 속성으로 컨텐츠 양에 따라 유연한 레이아웃 만들기 padding과 position 속성을 사용해서 간단하게 레이아웃 바꾸기 그래디언트 윤곽선을 1px 박스로 구현     마크업이 어느정도 익숙해져서 강사님의 방식에서 크게 벗어나지 않고 작성할 수 있었다.</description>
    </item>
    
    <item>
      <title>170915_TIL_html_css</title>
      <link>http://cmygray.github.io/post/til/170915_til_html_css/</link>
      <pubDate>Mon, 02 Oct 2017 19:08:49 +0900</pubDate>
      
      <guid>http://cmygray.github.io/post/til/170915_til_html_css/</guid>
      <description>17.09.15.(금) DONE  :nth-child(), :nth-of-type() 선택자로 반복선택을 간단히 처리하기   console.log(&amp;#39;hello world&amp;#39;);   &amp;lt;dl&amp;gt;태그 사용해서 제목, 본문, 썸네일 이미지를 마크업하고 float속성을 활용해서 레이아웃 target 속성의 정확한 역할을 배웠다. (부연 툴팁을 위한 것이 아님) display: flex -webkit 계열 버그 해결하기 Mastering margin collapse, negative margin
   검색바 마크업에 &amp;lt;form&amp;gt; 태그 사용 시 heading과 label 중 어떤 걸 숨겨야 할지, 돋보기 썸네일을 img로 마크업 할 것인지 스타일속성으로 배경처리할 것인지에 대해 생각하면서 마크업이 좀 더 이해가 됐다.</description>
    </item>
    
    <item>
      <title>170914_TIL_html_css</title>
      <link>http://cmygray.github.io/post/til/170914_til_html_css/</link>
      <pubDate>Mon, 02 Oct 2017 19:08:46 +0900</pubDate>
      
      <guid>http://cmygray.github.io/post/til/170914_til_html_css/</guid>
      <description>수업시간에 다룬 CSS animation, form tag, 그외 찾아본 자료들 정리
CSS animation form, fieldset, input&amp;hellip; &amp;lt;form&amp;gt; 태그의 기본 구조
&amp;lt;form&amp;gt;여기가 어떤 폼인지 써준다 &amp;lt;fieldset&amp;gt;서로 연관된 인풋들끼리 묶는 역할 &amp;lt;legend&amp;gt;필드셋의 내용에 대해서 안내&amp;lt;/legend&amp;gt; &amp;lt;div&amp;gt;필요시 디비전태그로 라벨,인풋을 묶는다 &amp;lt;label&amp;gt;인풋에 기입할 내용 설명&amp;lt;/label&amp;gt; &amp;lt;input&amp;gt;정보 입력하는 곳, 다양한 속성 제공 &amp;lt;/div&amp;gt; &amp;lt;button&amp;gt;버튼으로 제출&amp;lt;/button&amp;gt; &amp;lt;/fieldset&amp;gt; &amp;lt;/form&amp;gt;  label, input 묶는 법
 &amp;lt;label for=&amp;quot;text&amp;quot;&amp;gt;, &amp;lt;input id=&amp;quot;text&amp;quot;&amp;gt; 짝 맞추기 &amp;lt;input title=&amp;quot;label-text&amp;quot;&amp;gt;, 한가지 태그만 사용하는 방법  button, input 묶는법</description>
    </item>
    
    <item>
      <title>170913_TIL_html_css</title>
      <link>http://cmygray.github.io/post/til/170913_til_html_css/</link>
      <pubDate>Mon, 02 Oct 2017 19:08:44 +0900</pubDate>
      
      <guid>http://cmygray.github.io/post/til/170913_til_html_css/</guid>
      <description>fds week2 day3
HTML/CSS 오전 지각내용  모서리 둥글게 하기, 그래디언트 넣기
 .readable-hidden 클래스 숨기기
 li a {, li&amp;gt;a { 의 차이점: 메인메뉴만 글자 흰색으로 바꾸기   main-menu &amp;gt; li 가로배치하기. float: left 사용.
li 크기를 지정하지 않아서, 모든 하위 엘리먼트가 선택되서 정렬이 이상해짐. &amp;gt; 사용.
.sub-menu 때문에 span의 크기까지 영향을 받는다.
자유롭게 스팬 위치를 정하면서도 li에 영향을 주지 않도록하려면 하위 엘리먼트 .sub-menu의 z-index를 바꾼다. 각 서브메뉴의 기준점은 나중에 좌표로 정해주면 된다.</description>
    </item>
    
    <item>
      <title>170912_TIL_html_css</title>
      <link>http://cmygray.github.io/post/til/170912_til_html_css/</link>
      <pubDate>Mon, 02 Oct 2017 19:08:36 +0900</pubDate>
      
      <guid>http://cmygray.github.io/post/til/170912_til_html_css/</guid>
      <description>HTML, CSS 복습. web cafe 마크업, header layout 연습, homeworks
web cafe review Markup(linealization)  brief layout
tag명이 될지, class명이 될지 모르지만 일단 페이지를 보고 레이아웃을 기억하면서 다시 그려본다.
  body tag 밑으로-
header logo info-menu links navigator sub-menu visual main-content leftsidebar mainbox rightsidebar slogan footer    sementic markup
위에서 작성한 &amp;lsquo;막&amp;rsquo;크업에 어떤 태그를 사용할지 덧붙인다.
wrapperdiv -&amp;gt; wrapper도 추가해준다. 이유는 기억이 안나지만&amp;hellip;  header`header` logo`h1` info`ul` links`li` `a` navigator`ul` sub-menu`li` visual`div` main-content`div` leftsidebar`div` mainbox`div` rightsidebar`div` slogan`slogan` footer`footer`    markup with class</description>
    </item>
    
    <item>
      <title>170911_TIL_html&amp;css</title>
      <link>http://cmygray.github.io/post/til/170911_til_html_css/</link>
      <pubDate>Mon, 02 Oct 2017 19:07:47 +0900</pubDate>
      
      <guid>http://cmygray.github.io/post/til/170911_til_html_css/</guid>
      <description>HTML basic fds week2 day1
html의 발전과정, 웹표준, 접근성을 간단히 배웠다.
sementic &amp;amp; logically structured markup 이란 어떤 것인지, 왜 중요한 것인지 HTML변천사와 버전간 비교를 통해 배웠다.
HTML/CSS/Javascript 웹 기술 중 프론트엔드 단에서 주로 사용하는 기술 세가지.
 HTML: structure
먼저 건강한 구조를 구축한다. sementic, logical structure CSS: styling
선형으로 구축된 HTML 구조에 스타일을 부여한다. 비선형 레이아웃으로 바뀌는 것도 모두 여기서 처리한다. 주요 의의는 문서의 구조와 스타일을 분리하는 것이다&amp;hellip; Javascript: dynamic(?</description>
    </item>
    
    <item>
      <title>170908_TIL_CS&amp;python</title>
      <link>http://cmygray.github.io/post/til/170908_til_cs_py/</link>
      <pubDate>Sun, 01 Oct 2017 19:54:23 +0900</pubDate>
      
      <guid>http://cmygray.github.io/post/til/170908_til_cs_py/</guid>
      <description>WEB developer tool -&amp;gt; network -&amp;gt; Headers, Response 에 나타나는 정보들을 이해하기
 structure
호스트들이 연결된 라우터들이 연결된 인터넷 서비스 공급자들이 연결된 원거리 통신망의 연결
LAN이 모여 WAN이 되고 WAN이 모여 구성된 WEB  router: public/private (eg. 192.168.0.1) LAN: Local Area Network WAN: Wide Area Network ISP: Internet Service Provider   { &amp;#34;WAN&amp;#34; : [ {&amp;#34;ISP1&amp;#34; : [ {&amp;#34;router1&amp;#34; : [ &amp;#34;host1&amp;#34;, &amp;#34;host2&amp;#34;, &amp;#34;host3&amp;#34;, &amp;#34;...&amp;#34; ]}, {&amp;#34;router2&amp;#34; : [ &amp;#34;host1&amp;#34;, &amp;#34;host2&amp;#34;, &amp;#34;host3&amp;#34;, &amp;#34;.</description>
    </item>
    
    <item>
      <title>170907_TIL_CS&amp;python</title>
      <link>http://cmygray.github.io/post/til/170907_til_cs_py/</link>
      <pubDate>Sun, 01 Oct 2017 19:52:36 +0900</pubDate>
      
      <guid>http://cmygray.github.io/post/til/170907_til_cs_py/</guid>
      <description>CS with python CS 학습목적: 면접 대응(js에서 꼭 알 필요는 없다고 한다)
index bold: 오늘 꼭 챙겨야 할 내용들
italic: 내일 다룰 내용
 programming language &amp;gt; 지금까지 python을 배웠다 data structure algorithm computer architecture  수, 진수 변환 memory address 정수가 저장되는 방법: 양수와 음수(2의 보수)의 차이 실수의 저장 방식: 부동소수점 문자열 인코딩: ASCII / UNICODE  memory hierachy  register locality cache hit miss virtual address space  code data heap stack  stack frame  OS</description>
    </item>
    
    <item>
      <title>170906_TIL_CS&amp;python</title>
      <link>http://cmygray.github.io/post/til/170906_til_cs_py/</link>
      <pubDate>Sun, 01 Oct 2017 19:52:27 +0900</pubDate>
      
      <guid>http://cmygray.github.io/post/til/170906_til_cs_py/</guid>
      <description>cs &amp;amp; python to do dic.clear, dic.copy 알아보기 asterisk 이해하기 a, *b = list  bool logical operator file I/O 이해/복습 TIL 작성 이산수학? 대략적으로 무엇인지 dictionary comprehention  python install openpyxl
(env3)$ pip install openpyxl  dictionary  명칭: 딕셔너리, 해시 테이블, 맵 (모두 같은 의미) 형태: {key : value, &amp;hellip;} -&amp;gt; pairs dic에는 순서가 없다. key로 접근한다. dic[&#39;key-name&#39;] change value dic[&#39;key-name&#39;] = new-value remove dic del dic[&#39;key-name&#39;]   강력한 del object 뭐든지 지워버린다</description>
    </item>
    
    <item>
      <title>170905_TIL_git</title>
      <link>http://cmygray.github.io/post/til/170905_til_git/</link>
      <pubDate>Sun, 01 Oct 2017 19:52:11 +0900</pubDate>
      
      <guid>http://cmygray.github.io/post/til/170905_til_git/</guid>
      <description>git basic create new repository #create new folder and change dir mkdir repo-name cd repo-name #initiate git and check git init git status  add file and commit touch file-name git status untracked files: ... git add file-name git status new file: ... git commit -m &amp;#34;commit message here&amp;#34; git commit -m &amp;#34;commit title /n commit description&amp;#34; #after edit file git status modified: ... git add ... git commit .</description>
    </item>
    
    <item>
      <title>170904_TIL_readme</title>
      <link>http://cmygray.github.io/post/til/170904_til_readme/</link>
      <pubDate>Sun, 01 Oct 2017 14:04:35 +0900</pubDate>
      
      <guid>http://cmygray.github.io/post/til/170904_til_readme/</guid>
      <description>TIL (2017-09-04 ~) 9월 초 프론트엔드 개발을 배우기 시작하며 TIL(Today I Learn) 작성을 시작했었다. 연휴를 맞아 블로그로 사용할 github io 페이지에 그동안 작성한 TIL을 업로드하기로 했고 hexo, jekyll의 테마 설정에 애를 먹다가 결국 심플한 hugo를 사용하는 것으로 선택아닌 선택을 하였다.
기록 방식 변경 (2017-09-15) 배운 내용을 매일매일 마크다운으로 정리한다는 건 지속가능성이 떨어져서 항목만 적기로 했다. 정리한 내용은 추후 새로운 카테고리를 만들어서 언어별, 종류별로 할 예정이다. 아래와 같은 방식으로 github에 저장하고, 가급적 그날그날 블로그에 업로드한다.</description>
    </item>
    
  </channel>
</rss>